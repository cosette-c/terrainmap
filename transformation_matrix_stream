#builds a transformation matrix with position, roll, pitch, and, yaw

import pyrealsense2 as rs
import numpy as np
import math as m


def initialize_camera():
    # start the frames pipe
    p = rs.pipeline()
    conf = rs.config()
    conf.enable_stream(rs.stream.pose)
    prof = p.start(conf)
    return p

def position_data(position):
    return np.asarray([position.x, position.y, position.z])

def roll_pitch_yaw_calc(data):
    w = data.rotation.w
    x = -data.rotation.z
    y = data.rotation.x
    z = -data.rotation.y

    pitch =  -m.asin(2.0 * (x*z - w*y)) * 180.0 / m.pi;
    roll  =  m.atan2(2.0 * (w*x + y*z), w*w - x*x - y*y + z*z) * 180.0 / m.pi;
    yaw   =  m.atan2(2.0 * (w*z + x*y), w*w + x*x - y*y - z*z) * 180.0 / m.pi;

    return np.asarray([roll, pitch, yaw])

def transformation_matrix_creator(position, roll_pitch_yaw):
    r = roll_pitch_yaw[0]
    p = roll_pitch_yaw[1]
    y = roll_pitch_yaw[2]

    rotation = np.array([[m.cos(y)*m.cos(r)-m.cos(p)*m.sin(r)*m.sin(y), m.cos(y)*m.sin(r)+m.cos(p)*m.cos(r)*m.sin(y), m.sin(y)*m.sin(p)], [-m.sin(y)*m.cos(r)-m.cos(p)*m.sin(r)*m.cos(y), -m.sin(y)*m.sin(r)+m.cos(p)*m.cos(r)*m.cos(y), m.cos(y)*m.sin(p)], [m.sin(p)*m.sin(r), -m.sin(p)*m.cos(r), m.cos(p)]])

    Rd = np.hstack((rotation, position.reshape(3,1)))
    H = np.vstack((Rd, np.array((0,0,0,1))))

    return H

p = initialize_camera()
try:
    for _ in range(5):
        f = p.wait_for_frames()
        position = position_data(f[0].as_pose_frame().get_pose_data().translation)
        roll_pitch_yaw = roll_pitch_yaw_calc(f[0].as_pose_frame().get_pose_data())

        print(transformation_matrix_creator(position, roll_pitch_yaw))

finally:
    p.stop()

